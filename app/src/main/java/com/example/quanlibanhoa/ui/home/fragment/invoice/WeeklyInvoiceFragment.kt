package com.example.quanlibanhoa.ui.home.fragment.invoice

import android.annotation.SuppressLint
import android.app.AlertDialog
import android.content.Context
import android.os.Bundle
import android.text.Editable
import android.text.TextWatcher
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.view.inputmethod.InputMethodManager
import android.widget.TextView
import android.widget.Toast
import androidx.fragment.app.Fragment
import androidx.fragment.app.activityViewModels
import androidx.recyclerview.widget.LinearLayoutManager
import com.example.quanlibanhoa.data.entity.InvoiceWithDetails
import com.example.quanlibanhoa.databinding.FragmentWeeklyInvoiceBinding
import com.example.quanlibanhoa.ui.home.adapter.InvoiceHistoryAdapter
import com.example.quanlibanhoa.ui.home.viewmodel.InvoiceViewModel
import com.example.quanlibanhoa.ui.home.viewmodel.InvoiceViewModelFactory
import com.example.quanlibanhoa.ui.home.viewmodel.StateInvoice
import com.example.quanlibanhoa.utils.InvoiceFilter

class WeeklyInvoiceFragment : Fragment() {

    private var _binding: FragmentWeeklyInvoiceBinding? = null
    private val binding get() = _binding!!
    private lateinit var adapter: InvoiceHistoryAdapter
    private var currentInvoices = listOf<InvoiceWithDetails>()

    val invoiceViewModel: InvoiceViewModel by activityViewModels {
        InvoiceViewModelFactory(
            requireContext()
        )
    }

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        // Inflate the layout for this fragment
        _binding = FragmentWeeklyInvoiceBinding.inflate(
            layoutInflater,
            container,
            false
        )
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        // üî• KH·ªûI T·∫†O ADAPTER V·ªöI C√ÅC CALLBACK X√ìA
        adapter = InvoiceHistoryAdapter(
            onClick = { invoice ->
                // X·ª≠ l√Ω s·ª± ki·ªán khi nh·∫•p v√†o h√≥a ƒë∆°n (Xem chi ti·∫øt)
                if (!adapter.isMultiSelectMode) {
                    Toast.makeText(
                        requireContext(),
                        "Xem chi ti·∫øt Hƒê ${invoice.invoice.id}",
                        Toast.LENGTH_SHORT
                    ).show()
                }
            },
            onDeleteSelected = { list -> showDeleteConfirmDialog(list) },
            onMultiSelectModeChanged = { isEnabled ->
                if (isEnabled) {
                    showDeleteToolbar()
                } else {
                    hideDeleteToolbar()
                }
            },
            onSelectionCountChanged = { count ->
                updateDeleteToolbarText(count)
            }
        )
        binding.rycWeeklyInvoice.layoutManager = LinearLayoutManager(requireContext())
        binding.rycWeeklyInvoice.adapter = adapter
        observerData()
        setupSearchView()
    }

    private fun observerData() {
        invoiceViewModel.invoiceWithDetailsStateList.observe(viewLifecycleOwner){
            // L·ªçc h√≥a ƒë∆°n theo ti√™u ch√≠ tu·∫ßn n√†y
            val filteredInvoices =
                InvoiceFilter.filterInvoices(it, "thisWeek")
            currentInvoices = filteredInvoices
            adapter.submitList(filteredInvoices)
        }
        // üî• THEO D√ïI TR·∫†NG TH√ÅI X√ìA (C·∫ßn c√≥ StateInvoice t∆∞∆°ng ·ª©ng trong ViewModel)
        invoiceViewModel.deleteInvoiceState2.observe(viewLifecycleOwner) { result ->
            if (result == StateInvoice.IDLE) return@observe
            binding.btnConfirmDelete.isEnabled = true
            binding.btnConfirmDelete.alpha = 1f
            when (result) {
                StateInvoice.DELETE_INVOICE_SUCCESS -> {
                    Toast.makeText(
                        requireContext(),
                        "X√≥a h√≥a ƒë∆°n th√†nh c√¥ng.",
                        Toast.LENGTH_SHORT
                    ).show()
                    invoiceViewModel.resetDeleteState(2)
                }
                StateInvoice.DELETE_INVOICE_ERROR -> {
                    Toast.makeText(
                        requireContext(),
                        "L·ªói khi x√≥a h√≥a ƒë∆°n, vui l√≤ng th·ª≠ l·∫°i!",
                        Toast.LENGTH_SHORT).show()
                    invoiceViewModel.resetDeleteState(2)
                }
                else -> {}
            }
        }
    }

    // H√ÄM X·ª¨ L√ù TOOLBAR V√Ä X√ìA
    private fun showDeleteConfirmDialog(invoicesToDelete: List<InvoiceWithDetails>) {
        if (invoicesToDelete.isEmpty()) return

        AlertDialog.Builder(requireContext())
            .setTitle("X√°c nh·∫≠n x√≥a")
            .setMessage("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ${invoicesToDelete.size} h√≥a ƒë∆°n ƒë√£ ch·ªçn?")
            .setPositiveButton("X√≥a") { _, _ ->
                val invoiceIds = invoicesToDelete.map { it.invoice.id }
                //G·ªåI H√ÄM X√ìA TRONG VIEWMODEL
                binding.btnConfirmDelete.isEnabled = false
                binding.btnConfirmDelete.alpha = 0.8f
                invoiceViewModel.deleteInvoicesByIds(invoiceIds, 2)
                adapter.clearSelection()
            }
            .setNegativeButton("H·ªßy", null)
            .show()
    }

    private fun showDeleteToolbar() {
        binding.deleteToolbar.visibility = View.VISIBLE

        binding.btnClearSelection.setOnClickListener {
            adapter.clearSelection()
        }

        binding.btnConfirmDelete.setOnClickListener {
            // Chuy·ªÉn Set sang List ƒë·ªÉ truy·ªÅn ƒëi
            showDeleteConfirmDialog(adapter.selectedInvoices.toList())
        }
    }

    private fun hideDeleteToolbar() {
        binding.deleteToolbar.visibility = View.GONE
        updateDeleteToolbarText(0)
    }

    @SuppressLint("SetTextI18n")
    private fun updateDeleteToolbarText(count: Int) {
        binding.btnConfirmDelete.text = "X√≥a ($count)"
        binding.btnConfirmDelete.isEnabled = count > 0

        if (count == 0 && adapter.isMultiSelectMode) {
            adapter.setMultiSelectMode(false)
        }
    }

    private fun setupSearchView() {
        // 1. Theo d√µi thay ƒë·ªïi vƒÉn b·∫£n v√† x·ª≠ l√Ω n√∫t Clear
        binding.etSearch.addTextChangedListener(object : TextWatcher {
            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}

            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {
                // Hi·ªÉn th·ªã/·∫®n n√∫t Clear
                binding.ivClear.visibility = if (s.isNullOrEmpty()) View.GONE else View.VISIBLE

                // L·ªçc danh s√°ch ngay khi vƒÉn b·∫£n thay ƒë·ªïi
                filterList(s.toString())
            }

            override fun afterTextChanged(s: Editable?) {}
        })

        // 2. X·ª≠ l√Ω khi nh·∫•n n√∫t Clear (X)
        binding.ivClear.setOnClickListener {
            binding.etSearch.setText("") // X√≥a text
            binding.etSearch.requestFocus() // Gi·ªØ focus v√† b√†n ph√≠m ƒë·ªÉ ng∆∞·ªùi d√πng ti·∫øp t·ª•c g√µ
            // filterList s·∫Ω ƒë∆∞·ª£c g·ªçi trong TextWatcher
        }

        // 3. X·ª≠ l√Ω khi ng∆∞·ªùi d√πng nh·∫•n "Search" tr√™n b√†n ph√≠m
        binding.etSearch.setOnEditorActionListener { v: TextView?, actionId: Int, event ->
            if (actionId == android.view.inputmethod.EditorInfo.IME_ACTION_SEARCH) {
                // ·∫®n b√†n ph√≠m v√† b·ªè focus
                hideKeyboard(v)
                binding.etSearch.clearFocus()
                // filterList ƒë√£ ƒë∆∞·ª£c g·ªçi trong onTextChanged
                return@setOnEditorActionListener true
            }
            false
        }

        // 4. Kh√¥i ph·ª•c danh s√°ch ƒë·∫ßy ƒë·ªß khi EditText m·∫•t focus
        binding.etSearch.setOnFocusChangeListener { v, hasFocus ->
            if (!hasFocus && binding.etSearch.text.isNullOrBlank()) {
                // N·∫øu EditText m·∫•t focus V√Ä kh√¥ng c√≥ n·ªôi dung t√¨m ki·∫øm, hi·ªÉn th·ªã l·∫°i list ƒë·∫ßy ƒë·ªß
                adapter.submitList(currentInvoices)
            }
        }
    }

    // H√†m ti·ªán √≠ch ƒë·ªÉ ·∫©n b√†n ph√≠m
    private fun hideKeyboard(view: TextView?) {
        val imm =
            context?.getSystemService(Context.INPUT_METHOD_SERVICE) as? InputMethodManager
        imm?.hideSoftInputFromWindow(view?.windowToken, 0)
    }


    private fun filterList(query: String?) {
        // S·ª≠ d·ª•ng currentInvoices ƒë√£ ƒë∆∞·ª£c l·ªçc theo "thisWeek"
        val listToSearch = currentInvoices

        val result = if (query.isNullOrBlank()) {
            // Khi query r·ªóng (ngay sau khi m·ªü ho·∫∑c clear), b·∫°n c√≥ th·ªÉ kh√¥ng c·∫ßn hi·ªÉn th·ªã l·∫°i
            // list ƒë·∫ßy ƒë·ªß, v√¨ vi·ªác n√†y ƒë∆∞·ª£c x·ª≠ l√Ω trong onTextChanged.
            // Tuy nhi√™n, n·∫øu b·∫°n mu·ªën t√¨m ki·∫øm query r·ªóng th√¨ c·ª© ƒë·ªÉ filtered.
            listToSearch
        } else {
            listToSearch.filter {
                it.invoice.tenKhach.contains(query, ignoreCase = true) ||
                        it.invoice.sdt?.contains(query, ignoreCase = true) == true
            }
        }

        adapter.submitList(result)
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }
}